#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import sys
import subprocess
import importlib.util
from typing import Dict, List, Tuple

def check_module(module_name: str, install_name: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª—è"""
    try:
        spec = importlib.util.find_spec(module_name)
        return spec is not None
    except ImportError:
        return False

def get_module_version(module_name: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –º–æ–¥—É–ª—è"""
    try:
        module = importlib.import_module(module_name)
        return getattr(module, '__version__', 'unknown')
    except:
        return 'not found'

def check_dependencies() -> Dict[str, Tuple[bool, str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    dependencies = {
        'docx': ('python-docx', 'python-docx'),
        'langchain': ('langchain', 'langchain'),
        'langchain_community': ('langchain-community', 'langchain-community'),
        'langchain_huggingface': ('langchain-huggingface', 'langchain-huggingface'),
        'chromadb': ('chromadb', 'chromadb'),
        'sentence_transformers': ('sentence-transformers', 'sentence-transformers'),
        'torch': ('torch', 'torch'),
        'numpy': ('numpy', 'numpy'),
        'transformers': ('transformers', 'transformers'),
        'openai': ('openai', 'openai'),
        'uuid': ('uuid', 'built-in'),
        'os': ('os', 'built-in'),
        'typing': ('typing', 'built-in'),
        'dataclasses': ('dataclasses', 'built-in'),
        'pathlib': ('pathlib', 'built-in'),
        're': ('re', 'built-in')
    }
    
    results = {}
    
    for module_name, (display_name, install_name) in dependencies.items():
        is_available = check_module(module_name)
        version = get_module_version(module_name) if is_available else 'not found'
        results[display_name] = (is_available, version)
    
    return results

def check_python_version() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    return sys.version_info >= (3, 8)

def check_disk_space() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ"""
    try:
        import shutil
        free_bytes = shutil.disk_usage('.').free
        free_gb = free_bytes / (1024**3)
        return free_gb >= 3.0  # –ú–∏–Ω–∏–º—É–º 3GB
    except:
        return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

def install_missing_packages(missing_packages: List[str]):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã"""
    if not missing_packages:
        return
    
    print(f"\nüîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
    
    for package in missing_packages:
        try:
            print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])
            print(f"‚úÖ {package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("=== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –î–õ–Ø –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    if check_python_version():
        print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    else:
        print(f"‚ùå Python {sys.version.split()[0]} - –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ...")
    if check_disk_space():
        print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
    else:
        print("‚ö†Ô∏è  –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3GB+)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    results = check_dependencies()
    
    available = []
    missing = []
    
    for package, (is_available, version) in results.items():
        if is_available:
            if version == 'built-in':
                print(f"‚úÖ {package} (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)")
            else:
                print(f"‚úÖ {package} v{version}")
            available.append(package)
        else:
            print(f"‚ùå {package} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if package not in ['built-in']:
                missing.append(package)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {len(available)}")
    print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing)}")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    critical_deps = ['python-docx', 'langchain', 'langchain-community', 'langchain-huggingface', 'chromadb', 'sentence-transformers']
    missing_critical = [dep for dep in missing if dep in critical_deps]
    
    if missing_critical:
        print(f"\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:")
        for dep in missing_critical:
            print(f"   - {dep}")
        
        print(f"\nüí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"   pip install {' '.join(missing_critical)}")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        response = input("\n‚ùì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ")
        if response.lower() in ['y', 'yes', '–¥–∞', '–¥']:
            install_missing_packages(missing_critical)
        
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    required_files = ['client.docx', 'improved_text_splitter.py']
    
    for file_name in required_files:
        try:
            with open(file_name, 'r') as f:
                print(f"‚úÖ {file_name} –Ω–∞–π–¥–µ–Ω")
        except FileNotFoundError:
            print(f"‚ùå {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if file_name == 'client.docx':
                print("   –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à .docx —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
            elif file_name == 'improved_text_splitter.py':
                print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª improved_text_splitter.py –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüöÄ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É:")
    print("   python docx_to_chromadb.py")
    print("   python search_demo.py")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞: {e}")
        sys.exit(1) 
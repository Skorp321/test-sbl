from typing import Dict, Any, TypedDict
from langgraph.graph import StateGraph, END
from langgraph.checkpoint.memory import MemorySaver
from concurse.models import ContestAnalysisState, ContestInfo
from concurse.agents import LegalAgent, EconomicAgent, ManagerAgent
import json


class ContestAnalysisGraph:
    """–ì—Ä–∞—Ñ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Å —Ç—Ä–µ–º—è –∞–≥–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.legal_agent = LegalAgent()
        self.economic_agent = EconomicAgent()
        self.manager_agent = ManagerAgent()
        self.graph = self._build_graph()
    
    def _build_graph(self) -> StateGraph:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞
        class GraphState(TypedDict):
            contest_info: Dict[str, Any]
            legal_analysis: Dict[str, Any]
            economic_analysis: Dict[str, Any]
            managerial_decision: Dict[str, Any]
            messages: list
            current_step: str
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–µ—Ç–æ–¥–∞—Ö
        self.GraphState = GraphState
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
        workflow = StateGraph(GraphState)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
        workflow.add_node("legal_agent", self._legal_analysis_node)
        workflow.add_node("economic_agent", self._economic_analysis_node)
        workflow.add_node("manager_agent", self._managerial_decision_node)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        workflow.set_entry_point("legal_agent")
        workflow.add_edge("legal_agent", "economic_agent")
        workflow.add_edge("economic_agent", "manager_agent")
        workflow.add_edge("manager_agent", END)
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≥—Ä–∞—Ñ —Å checkpointer –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        memory = MemorySaver()
        return workflow.compile(checkpointer=memory)
    
    def _legal_analysis_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """–£–∑–µ–ª —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üèõÔ∏è –ù–∞—á–∏–Ω–∞—é —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        contest_state = ContestAnalysisState(
            contest_info=ContestInfo(**state["contest_info"]),
            current_step="legal_analysis"
        )
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
        legal_analysis = self.legal_agent.analyze(contest_state)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state["legal_analysis"] = legal_analysis.model_dump()
        state["current_step"] = "legal_analysis_completed"
        state["messages"].append("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        print(f"‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {legal_analysis.risk_level}")
        return state
    
    def _economic_analysis_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """–£–∑–µ–ª —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üí∞ –ù–∞—á–∏–Ω–∞—é —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        contest_state = ContestAnalysisState(
            contest_info=ContestInfo(**state["contest_info"]),
            legal_analysis=state.get("legal_analysis"),
            current_step="economic_analysis"
        )
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
        economic_analysis = self.economic_agent.analyze(contest_state)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state["economic_analysis"] = economic_analysis.model_dump()
        state["current_step"] = "economic_analysis_completed"
        state["messages"].append("–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        print(f"‚úÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {economic_analysis.risk_level}")
        return state
    
    def _managerial_decision_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """–£–∑–µ–ª –ø—Ä–∏–Ω—è—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        print("üëî –ü—Ä–∏–Ω–∏–º–∞—é —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        from concurse.models import LegalAnalysis, EconomicAnalysis
        
        contest_state = ContestAnalysisState(
            contest_info=ContestInfo(**state["contest_info"]),
            legal_analysis=LegalAnalysis(**state["legal_analysis"]) if state.get("legal_analysis") else None,
            economic_analysis=EconomicAnalysis(**state["economic_analysis"]) if state.get("economic_analysis") else None,
            current_step="managerial_decision"
        )
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        managerial_decision = self.manager_agent.decide(contest_state)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state["managerial_decision"] = managerial_decision.model_dump()
        state["current_step"] = "completed"
        state["messages"].append("–£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
        
        print(f"‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {managerial_decision.decision}")
        return state
    
    def analyze_contest(self, contest_info: ContestInfo, thread_id: str = "default") -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä—Å–∞"""
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_state = {
            "contest_info": contest_info.model_dump(),
            "legal_analysis": {},
            "economic_analysis": {},
            "managerial_decision": {},
            "messages": ["–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä—Å–∞"],
            "current_step": "initial"
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        config = {"configurable": {"thread_id": thread_id}}
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä—Å–∞: {contest_info.title}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≥—Ä–∞—Ñ
        result = self.graph.invoke(initial_state, config)
        
        return result
    
    def get_analysis_summary(self, result: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        if not result.get("managerial_decision"):
            return "–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"
        
        legal = result.get("legal_analysis", {})
        economic = result.get("economic_analysis", {})
        decision = result.get("managerial_decision", {})
        
        summary = f"""
üìä –†–ï–ó–Æ–ú–ï –ê–ù–ê–õ–ò–ó–ê –ö–û–ù–ö–£–†–°–ê

üèõÔ∏è –Æ–†–ò–î–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {legal.get('risk_level', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω').replace('RiskLevel.', '').replace('LOW', '–Ω–∏–∑–∫–∏–π').replace('MEDIUM', '—Å—Ä–µ–¥–Ω–∏–π').replace('HIGH', '–≤—ã—Å–æ–∫–∏–π')}
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏: {', '.join(legal.get('legal_risks', [])[:2])}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {legal.get('confidence', 0):.0%}

üí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {economic.get('risk_level', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω').replace('RiskLevel.', '').replace('LOW', '–Ω–∏–∑–∫–∏–π').replace('MEDIUM', '—Å—Ä–µ–¥–Ω–∏–π').replace('HIGH', '–≤—ã—Å–æ–∫–∏–π')}
‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {sum(economic.get('estimated_costs', {}).values()) if isinstance(economic.get('estimated_costs', {}), dict) else economic.get('estimated_costs', 0):,.0f} —Ä—É–±.
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {f"{economic.get('potential_profit', 0):,.0f} —Ä—É–±." if economic.get('potential_profit') else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {economic.get('confidence', 0):.0%}

üëî –†–ï–®–ï–ù–ò–ï –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø:
‚Ä¢ –†–µ—à–µ–Ω–∏–µ: {decision.get('decision', '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ').replace('Decision.', '').replace('PARTICIPATE', '–£–ß–ê–°–¢–í–û–í–ê–¢–¨').replace('NOT_PARTICIPATE', '–ù–ï –£–ß–ê–°–¢–í–û–í–ê–¢–¨').replace('NEED_MORE_INFO', '–¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø')}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision.get('confidence', 0):.0%}
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: {', '.join(decision.get('key_factors', [])[:2])}

üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
{chr(10).join([f"‚Ä¢ {step}" for step in decision.get('next_steps', [])])}
        """
        
        return summary.strip()


def create_sample_contest() -> ContestInfo:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return ContestInfo(
        title="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è",
        description="–ö–æ–Ω–∫—É—Ä—Å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–æ–º –¥–ª—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
        budget=5000000.0,
        deadline="2024-03-15",
        requirements=[
            "–û–ø—ã—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –Ω–µ –º–µ–Ω–µ–µ 3 –ª–µ—Ç",
            "–ù–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –§–°–¢–≠–ö",
            "–®—Ç–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ –º–µ–Ω–µ–µ 10 —á–µ–ª–æ–≤–µ–∫",
            "–ù–∞–ª–∏—á–∏–µ —Å–ª—É–∂–±—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
        ],
        documentation=[
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "–°–ø—Ä–∞–≤–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö",
            "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è",
            "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏"
        ],
        evaluation_criteria=[
            "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é (40%)",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç (30%)",
            "–û–ø—ã—Ç –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è (20%)",
            "–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (10%)"
        ],
        additional_info={
            "contract_duration": "12 –º–µ—Å—è—Ü–µ–≤",
            "warranty_period": "24 –º–µ—Å—è—Ü–∞",
            "payment_terms": "–ø–æ—ç—Ç–∞–ø–Ω–∞—è –æ–ø–ª–∞—Ç–∞",
            "penalties": "0.1% –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏"
        }
    ) 
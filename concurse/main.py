#!/usr/bin/env python3
"""
AI-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö
–°–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç —Ç—Ä–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤:
1. –Æ—Ä–∏—Å—Ç - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã
2. –≠–∫–æ–Ω–æ–º–∏—Å—Ç - –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å  
3. –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
"""

import os
import sys
from dotenv import load_dotenv
from concurse.contest_analysis_graph import ContestAnalysisGraph, create_sample_contest
from concurse.models import ContestInfo
import json


def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    load_dotenv()
    
    # –û—Ç–∫–ª—é—á–∞–µ–º LangSmith –µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞
    if not os.getenv("LANGCHAIN_API_KEY"):
        os.environ["LANGCHAIN_TRACING_V2"] = "false"
    
    if not os.getenv("MISTRAL_API_KEY"):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω MISTRAL_API_KEY")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
        print("MISTRAL_API_KEY=your_mistral_api_key_here")
        sys.exit(1)


def print_detailed_analysis(result: dict):
    """–í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("\n" + "="*80)
    print("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–£–†–°–ê")
    print("="*80)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ
    contest = result.get("contest_info", {})
    print(f"\nüìÑ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ù–ö–£–†–°–ï:")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {contest.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    print(f"–ë—é–¥–∂–µ—Ç: {contest.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω'):,} —Ä—É–±." if contest.get('budget') else "–ë—é–¥–∂–µ—Ç: –ù–µ —É–∫–∞–∑–∞–Ω")
    print(f"–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏: {contest.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    
    # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    legal = result.get("legal_analysis", {})
    if legal:
        print(f"\nüèõÔ∏è –Æ–†–ò–î–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {legal.get('risk_level', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω').upper()}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {legal.get('confidence', 0):.0%}")
        
        risks = legal.get('legal_risks', [])
        if risks:
            print("–û—Å–Ω–æ–≤–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏:")
            for i, risk in enumerate(risks[:3], 1):
                print(f"  {i}. {risk}")
        
        docs = legal.get('required_documents', [])
        if docs:
            print("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
            for i, doc in enumerate(docs[:3], 1):
                print(f"  {i}. {doc}")
        
        print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞: {legal.get('recommendation', '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞')[:200]}...")
    
    # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    economic = result.get("economic_analysis", {})
    if economic:
        print(f"\nüí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {economic.get('risk_level', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω').upper()}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {economic.get('confidence', 0):.0%}")
        
        costs = economic.get('estimated_costs', {})
        if costs:
            total_cost = sum(costs.values()) if isinstance(costs, dict) else costs
            print(f"–û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_cost:,.0f} —Ä—É–±.")
            if isinstance(costs, dict):
                for category, cost in costs.items():
                    print(f"  ‚Ä¢ {category}: {cost:,.0f} —Ä—É–±.")
        
        profit = economic.get('potential_profit')
        if profit:
            print(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit:,.0f} —Ä—É–±.")
        
        roi = economic.get('roi_estimate')
        if roi:
            print(f"–û–∂–∏–¥–∞–µ–º—ã–π ROI: {roi:.1%}")
        
        opportunities = economic.get('market_opportunities', [])
        if opportunities:
            print("–†—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
            for i, opp in enumerate(opportunities[:3], 1):
                print(f"  {i}. {opp}")
        
        print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏—Å—Ç–∞: {economic.get('recommendation', '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞')[:200]}...")
    
    # –†–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    decision = result.get("managerial_decision", {})
    if decision:
        print(f"\nüëî –†–ï–®–ï–ù–ò–ï –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø:")
        decision_text = decision.get('decision', '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ')
        print(f"–ò–¢–û–ì–û–í–û–ï –†–ï–®–ï–ù–ò–ï: {decision_text.upper()}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏–∏: {decision.get('confidence', 0):.0%}")
        
        factors = decision.get('key_factors', [])
        if factors:
            print("–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–µ—à–µ–Ω–∏—è:")
            for i, factor in enumerate(factors, 1):
                print(f"  {i}. {factor}")
        
        conditions = decision.get('conditions', [])
        if conditions:
            print("–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:")
            for i, condition in enumerate(conditions, 1):
                print(f"  {i}. {condition}")
        
        steps = decision.get('next_steps', [])
        if steps:
            print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            for i, step in enumerate(steps, 1):
                print(f"  {i}. {step}")
        
        print(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {decision.get('reasoning', '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')[:300]}...")


def create_custom_contest():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞"""
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ö–û–ù–ö–£–†–°–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê")
    print("-" * 50)
    
    title = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞: ").strip()
    if not title:
        title = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å"
    
    description = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞: ").strip()
    if not description:
        description = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
    
    budget_input = input("–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –∫–æ–Ω–∫—É—Ä—Å–∞ (—Ä—É–±., –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    budget = None
    if budget_input:
        try:
            budget = float(budget_input.replace(",", "").replace(" ", ""))
        except ValueError:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—é–¥–∂–µ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
    
    deadline = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    print("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
    requirements = []
    while True:
        req = input("  –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ").strip()
        if not req:
            break
        requirements.append(req)
    
    return ContestInfo(
        title=title,
        description=description,
        budget=budget,
        deadline=deadline if deadline else None,
        requirements=requirements,
        documentation=[],
        evaluation_criteria=[],
        additional_info={}
    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_environment()
    
    print("ü§ñ AI-–ê–ì–ï–ù–¢ –ê–ù–ê–õ–ò–ó–ê –ö–û–ù–ö–£–†–°–û–í")
    print("=" * 50)
    print("–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö")
    print("–í–∫–ª—é—á–∞–µ—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏—è —é—Ä–∏—Å—Ç–∞, —ç–∫–æ–Ω–æ–º–∏—Å—Ç–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –∞–Ω–∞–ª–∏–∑–∞
    try:
        analysis_graph = ContestAnalysisGraph()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    while True:
        print("\n" + "="*50)
        print("–í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
        print("1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞")
        print("2. –°–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–Ω–∫—É—Ä—Å")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–∞
            print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∏–º–µ—Ä –∫–æ–Ω–∫—É—Ä—Å–∞...")
            contest = create_sample_contest()
            
            try:
                result = analysis_graph.analyze_contest(contest)
                
                # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
                summary = analysis_graph.get_analysis_summary(result)
                print(summary)
                
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                detail = input("\n–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑? (y/n): ").strip().lower()
                if detail in ['y', 'yes', '–¥–∞', '–¥']:
                    print_detailed_analysis(result)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        
        elif choice == "2":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å
            try:
                contest = create_custom_contest()
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω–∫—É—Ä—Å: {contest.title}")
                
                result = analysis_graph.analyze_contest(contest)
                
                # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
                summary = analysis_graph.get_analysis_summary(result)
                print(summary)
                
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                detail = input("\n–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑? (y/n): ").strip().lower()
                if detail in ['y', 'yes', '–¥–∞', '–¥']:
                    print_detailed_analysis(result)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        
        elif choice == "3":
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    main() 
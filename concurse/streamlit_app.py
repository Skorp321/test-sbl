import streamlit as st
import os
import sys
from datetime import datetime, date
import plotly.graph_objects as go
import plotly.express as px
from dotenv import load_dotenv
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from concurse.contest_analysis_graph import ContestAnalysisGraph, create_sample_contest
from concurse.models import ContestInfo, RiskLevel, Decision

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI-–ê–≥–µ–Ω—Ç –ê–Ω–∞–ª–∏–∑–∞ –ö–æ–Ω–∫—É—Ä—Å–æ–≤",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 2rem;
    }
    
    .agent-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .risk-low {
        background: linear-gradient(135deg, #4CAF50, #45a049);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        color: white;
        display: inline-block;
        margin: 0.2rem;
    }
    
    .risk-medium {
        background: linear-gradient(135deg, #FF9800, #F57C00);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        color: white;
        display: inline-block;
        margin: 0.2rem;
    }
    
    .risk-high {
        background: linear-gradient(135deg, #F44336, #D32F2F);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        color: white;
        display: inline-block;
        margin: 0.2rem;
    }
    
    .decision-participate {
        background: linear-gradient(135deg, #4CAF50, #45a049);
        padding: 1rem 2rem;
        border-radius: 25px;
        color: white;
        font-size: 1.2rem;
        font-weight: bold;
        text-align: center;
        margin: 1rem 0;
    }
    
    .decision-not-participate {
        background: linear-gradient(135deg, #F44336, #D32F2F);
        padding: 1rem 2rem;
        border-radius: 25px;
        color: white;
        font-size: 1.2rem;
        font-weight: bold;
        text-align: center;
        margin: 1rem 0;
    }
    
    .decision-need-info {
        background: linear-gradient(135deg, #FF9800, #F57C00);
        padding: 1rem 2rem;
        border-radius: 25px;
        color: white;
        font-size: 1.2rem;
        font-weight: bold;
        text-align: center;
        margin: 1rem 0;
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not os.getenv("LANGCHAIN_API_KEY"):
        os.environ["LANGCHAIN_TRACING_V2"] = "false"
    
    if not os.getenv("MISTRAL_API_KEY"):
        st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω MISTRAL_API_KEY. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª .env")
        st.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: MISTRAL_API_KEY=your_mistral_api_key_here")
        st.stop()

def get_risk_level_style(risk_level):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    if isinstance(risk_level, str):
        risk_level = risk_level.lower()
    else:
        risk_level = str(risk_level).lower()
    
    if "–Ω–∏–∑–∫–∏–π" in risk_level or "low" in risk_level:
        return "risk-low"
    elif "–≤—ã—Å–æ–∫–∏–π" in risk_level or "high" in risk_level:
        return "risk-high"
    else:
        return "risk-medium"

def get_decision_style(decision):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è"""
    if isinstance(decision, str):
        decision_text = decision.lower()
    else:
        decision_text = str(decision).lower()
    
    if "—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" in decision_text and "–Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" not in decision_text:
        return "decision-participate"
    elif "–Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" in decision_text:
        return "decision-not-participate"
    else:
        return "decision-need-info"

def format_currency(amount):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
    if amount is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    return f"{amount:,.0f} ‚ÇΩ".replace(",", " ")

def create_risk_chart(legal_risk, economic_risk):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∏—Å–∫–æ–≤"""
    risk_mapping = {"–Ω–∏–∑–∫–∏–π": 1, "—Å—Ä–µ–¥–Ω–∏–π": 2, "–≤—ã—Å–æ–∫–∏–π": 3}
    
    legal_val = risk_mapping.get(str(legal_risk).lower(), 2)
    economic_val = risk_mapping.get(str(economic_risk).lower(), 2)
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=[legal_val, economic_val],
        theta=['–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫', '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫'],
        fill='toself',
        name='–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–æ–≤',
        line_color='rgb(102, 126, 234)',
        fillcolor='rgba(102, 126, 234, 0.3)'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 3],
                tickvals=[1, 2, 3],
                ticktext=['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π']
            )
        ),
        showlegend=False,
        title="–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤",
        height=400
    )
    
    return fig

def create_financial_chart(costs, profit):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    if not costs or not profit:
        return None
    
    total_costs = sum(costs.values()) if isinstance(costs, dict) else costs
    
    fig = go.Figure(data=[
        go.Bar(name='–ó–∞—Ç—Ä–∞—Ç—ã', x=['–§–∏–Ω–∞–Ω—Å—ã'], y=[total_costs], marker_color='#FF6B6B'),
        go.Bar(name='–ü—Ä–∏–±—ã–ª—å', x=['–§–∏–Ω–∞–Ω—Å—ã'], y=[profit], marker_color='#4ECDC4')
    ])
    
    fig.update_layout(
        title='–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑',
        yaxis_title='–°—É–º–º–∞ (‚ÇΩ)',
        barmode='group',
        height=400
    )
    
    return fig

def display_contest_form():
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω–∫—É—Ä—Å–µ"""
    st.markdown('<div class="main-header">ü§ñ AI-–ê–≥–µ–Ω—Ç –ê–Ω–∞–ª–∏–∑–∞ –ö–æ–Ω–∫—É—Ä—Å–æ–≤</div>', unsafe_allow_html=True)
    
    with st.container():
        st.markdown("### üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ")
        
        col1, col2 = st.columns(2)
        
        with col1:
            title = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ *",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞",
                help="–ö—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞"
            )
            
            budget = st.number_input(
                "–ë—é–¥–∂–µ—Ç –∫–æ–Ω–∫—É—Ä—Å–∞ (‚ÇΩ)",
                min_value=0.0,
                step=10000.0,
                format="%.0f",
                help="–û–±—â–∏–π –±—é–¥–∂–µ—Ç –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ä—É–±–ª—è—Ö"
            )
            
            deadline = st.date_input(
                "–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏",
                min_value=date.today(),
                help="–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"
            )
        
        with col2:
            description = st.text_area(
                "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ *",
                height=100,
                placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞, –µ–≥–æ —Ü–µ–ª–µ–π –∏ –∑–∞–¥–∞—á",
                help="–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞"
            )
            
            requirements = st.text_area(
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
                height=100,
                placeholder="–ö–∞–∂–¥–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
                help="–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–Ω–∫—É—Ä—Å–∞"
            )
        
        documentation = st.text_area(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            placeholder="–ö–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
            help="–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å"
        )
        
        evaluation_criteria = st.text_area(
            "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏",
            placeholder="–ö–∞–∂–¥—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
            help="–ö—Ä–∏—Ç–µ—Ä–∏–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏"
        )
    
    return {
        'title': title,
        'description': description,
        'budget': budget if budget > 0 else None,
        'deadline': deadline.strftime("%Y-%m-%d") if deadline else None,
        'requirements': [req.strip() for req in requirements.split('\n') if req.strip()] if requirements else [],
        'documentation': [doc.strip() for doc in documentation.split('\n') if doc.strip()] if documentation else [],
        'evaluation_criteria': [crit.strip() for crit in evaluation_criteria.split('\n') if crit.strip()] if evaluation_criteria else []
    }

def display_analysis_results(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ
    contest = result.get("contest_info", {})
    st.markdown("### üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–ù–∞–∑–≤–∞–Ω–∏–µ", contest.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
    with col2:
        budget = contest.get('budget')
        st.metric("–ë—é–¥–∂–µ—Ç", format_currency(budget))
    with col3:
        st.metric("–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏", contest.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω'))
    
    # –ê–Ω–∞–ª–∏–∑ –∞–≥–µ–Ω—Ç–æ–≤
    legal = result.get("legal_analysis", {})
    economic = result.get("economic_analysis", {})
    decision = result.get("managerial_decision", {})
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    tab1, tab2, tab3, tab4 = st.tabs(["üèõÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "üëî –†–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", "üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"])
    
    with tab1:
        if legal:
            st.markdown("### üèõÔ∏è –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —é—Ä–∏—Å—Ç–∞")
            
            col1, col2 = st.columns(2)
            with col1:
                risk_level = str(legal.get('risk_level', '—Å—Ä–µ–¥–Ω–∏–π'))
                risk_class = get_risk_level_style(risk_level)
                st.markdown(f'<div class="{risk_class}">–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level.upper()}</div>', unsafe_allow_html=True)
                
                confidence = legal.get('confidence', 0)
                st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞", f"{confidence:.0%}")
            
            with col2:
                st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏:**")
                risks = legal.get('legal_risks', [])
                for i, risk in enumerate(risks[:5], 1):
                    st.write(f"{i}. {risk}")
            
            st.markdown("**–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**")
            docs = legal.get('required_documents', [])
            for i, doc in enumerate(docs[:5], 1):
                st.write(f"üìÑ {doc}")
            
            st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞:**")
            st.info(legal.get('recommendation', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'))
    
    with tab2:
        if economic:
            st.markdown("### üí∞ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—Å—Ç–∞")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                risk_level = str(economic.get('risk_level', '—Å—Ä–µ–¥–Ω–∏–π'))
                risk_class = get_risk_level_style(risk_level)
                st.markdown(f'<div class="{risk_class}">–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level.upper()}</div>', unsafe_allow_html=True)
                
                confidence = economic.get('confidence', 0)
                st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞", f"{confidence:.0%}")
            
            with col2:
                costs = economic.get('estimated_costs', {})
                total_cost = sum(costs.values()) if isinstance(costs, dict) else costs
                st.metric("–û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã", format_currency(total_cost))
                
                profit = economic.get('potential_profit')
                st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", format_currency(profit))
            
            with col3:
                roi = economic.get('roi_estimate')
                if roi:
                    st.metric("–û–∂–∏–¥–∞–µ–º—ã–π ROI", f"{roi:.1%}")
                
                if isinstance(costs, dict) and profit:
                    net_profit = profit - sum(costs.values())
                    st.metric("–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å", format_currency(net_profit))
            
            if isinstance(costs, dict):
                st.markdown("**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç:**")
                for category, cost in costs.items():
                    st.write(f"‚Ä¢ {category}: {format_currency(cost)}")
            
            opportunities = economic.get('market_opportunities', [])
            if opportunities:
                st.markdown("**–†—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**")
                for i, opp in enumerate(opportunities[:5], 1):
                    st.write(f"{i}. {opp}")
            
            st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏—Å—Ç–∞:**")
            st.info(economic.get('recommendation', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'))
    
    with tab3:
        if decision:
            st.markdown("### üëî –†–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            decision_text = str(decision.get('decision', '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ'))
            decision_class = get_decision_style(decision_text)
            
            if "—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" in decision_text.lower() and "–Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" not in decision_text.lower():
                decision_display = "‚úÖ –£–ß–ê–°–¢–í–û–í–ê–¢–¨"
            elif "–Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" in decision_text.lower():
                decision_display = "‚ùå –ù–ï –£–ß–ê–°–¢–í–û–í–ê–¢–¨"
            else:
                decision_display = "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø"
            
            st.markdown(f'<div class="{decision_class}">{decision_display}</div>', unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            
            with col1:
                confidence = decision.get('confidence', 0)
                st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏–∏", f"{confidence:.0%}")
                
                factors = decision.get('key_factors', [])
                if factors:
                    st.markdown("**–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–µ—à–µ–Ω–∏—è:**")
                    for i, factor in enumerate(factors, 1):
                        st.write(f"{i}. {factor}")
            
            with col2:
                conditions = decision.get('conditions', [])
                if conditions:
                    st.markdown("**–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:**")
                    for i, condition in enumerate(conditions, 1):
                        st.write(f"{i}. {condition}")
                
                steps = decision.get('next_steps', [])
                if steps:
                    st.markdown("**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**")
                    for i, step in enumerate(steps, 1):
                        st.write(f"üî∏ {step}")
            
            st.markdown("**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è:**")
            st.success(decision.get('reasoning', '–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'))
    
    with tab4:
        st.markdown("### üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if legal and economic:
                legal_risk = str(legal.get('risk_level', '—Å—Ä–µ–¥–Ω–∏–π'))
                economic_risk = str(economic.get('risk_level', '—Å—Ä–µ–¥–Ω–∏–π'))
                risk_chart = create_risk_chart(legal_risk, economic_risk)
                st.plotly_chart(risk_chart, use_container_width=True)
        
        with col2:
            if economic:
                costs = economic.get('estimated_costs', {})
                profit = economic.get('potential_profit')
                financial_chart = create_financial_chart(costs, profit)
                if financial_chart:
                    st.plotly_chart(financial_chart, use_container_width=True)
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        st.markdown("### üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
        summary_data = []
        
        if legal:
            summary_data.append({
                "–≠–∫—Å–ø–µ—Ä—Ç": "üèõÔ∏è –Æ—Ä–∏—Å—Ç",
                "–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞": str(legal.get('risk_level', '—Å—Ä–µ–¥–Ω–∏–π')).upper(),
                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{legal.get('confidence', 0):.0%}",
                "–ö–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": legal.get('recommendation', '')[:100] + "..."
            })
        
        if economic:
            summary_data.append({
                "–≠–∫—Å–ø–µ—Ä—Ç": "üí∞ –≠–∫–æ–Ω–æ–º–∏—Å—Ç", 
                "–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞": str(economic.get('risk_level', '—Å—Ä–µ–¥–Ω–∏–π')).upper(),
                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{economic.get('confidence', 0):.0%}",
                "–ö–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": economic.get('recommendation', '')[:100] + "..."
            })
        
        if decision:
            summary_data.append({
                "–≠–∫—Å–ø–µ—Ä—Ç": "üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
                "–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞": "-",
                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{decision.get('confidence', 0):.0%}",
                "–ö–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": decision.get('reasoning', '')[:100] + "..."
            })
        
        if summary_data:
            st.table(summary_data)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    setup_environment()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        analysis_mode = st.selectbox(
            "–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞",
            ["–ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å", "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω–∫—É—Ä—Å–∞"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π"
        )
        
        st.markdown("---")
        st.markdown("### ü§ñ –û —Å–∏—Å—Ç–µ–º–µ")
        st.markdown("""
        **AI-–ê–≥–µ–Ω—Ç –ê–Ω–∞–ª–∏–∑–∞ –ö–æ–Ω–∫—É—Ä—Å–æ–≤** –≤–∫–ª—é—á–∞–µ—Ç:
        
        üèõÔ∏è **–Æ—Ä–∏—Å—Ç** - –∞–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤
        
        üí∞ **–≠–∫–æ–Ω–æ–º–∏—Å—Ç** - –æ—Ü–µ–Ω–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏
        
        üëî **–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å** - –ø—Ä–∏–Ω—è—Ç–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        """)
        
        st.markdown("---")
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        if 'analysis_count' not in st.session_state:
            st.session_state.analysis_count = 0
        st.metric("–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤", st.session_state.analysis_count)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if analysis_mode == "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω–∫—É—Ä—Å–∞":
        st.markdown('<div class="main-header">ü§ñ AI-–ê–≥–µ–Ω—Ç –ê–Ω–∞–ª–∏–∑–∞ –ö–æ–Ω–∫—É—Ä—Å–æ–≤</div>', unsafe_allow_html=True)
        st.markdown("### üìã –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞")
        
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–∞", type="primary", use_container_width=True):
            with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∏–º–µ—Ä –∫–æ–Ω–∫—É—Ä—Å–∞..."):
                try:
                    contest = create_sample_contest()
                    analysis_graph = ContestAnalysisGraph()
                    result = analysis_graph.analyze_contest(contest)
                    
                    st.session_state.analysis_count += 1
                    st.session_state.last_result = result
                    
                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    display_analysis_results(result)
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    else:  # –ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å
        contest_data = display_contest_form()
        
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
            if not contest_data['title'] or not contest_data['description']:
                st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞")
            else:
                with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω–∫—É—Ä—Å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
                    try:
                        contest = ContestInfo(
                            title=contest_data['title'],
                            description=contest_data['description'],
                            budget=contest_data['budget'],
                            deadline=contest_data['deadline'],
                            requirements=contest_data['requirements'],
                            documentation=contest_data['documentation'],
                            evaluation_criteria=contest_data['evaluation_criteria'],
                            additional_info={}
                        )
                        
                        analysis_graph = ContestAnalysisGraph()
                        result = analysis_graph.analyze_contest(contest)
                        
                        st.session_state.analysis_count += 1
                        st.session_state.last_result = result
                        
                        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                        display_analysis_results(result)
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
                        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ Mistral AI –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    if hasattr(st.session_state, 'last_result') and analysis_mode == "–ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å":
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑"):
            display_analysis_results(st.session_state.last_result)

if __name__ == "__main__":
    main() 
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ API –∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

from concurse.models import ContestInfo, LegalAnalysis, EconomicAnalysis, ManagerialDecision, RiskLevel, Decision
from concurse.contest_analysis_graph import create_sample_contest
import json


def test_models():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    contest = create_sample_contest()
    print(f"‚úÖ –ö–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω: {contest.title}")
    print(f"   –ë—é–¥–∂–µ—Ç: {contest.budget:,} —Ä—É–±.")
    print(f"   –¢—Ä–µ–±–æ–≤–∞–Ω–∏–π: {len(contest.requirements)}")
    
    # –¢–µ—Å—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    legal = LegalAnalysis(
        legal_risks=["–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∏—Å–∫ 1", "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∏—Å–∫ 2"],
        compliance_issues=["–í–æ–ø—Ä–æ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 1"],
        required_documents=["–î–æ–∫—É–º–µ–Ω—Ç 1", "–î–æ–∫—É–º–µ–Ω—Ç 2"],
        risk_level=RiskLevel.MEDIUM,
        recommendation="–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞",
        confidence=0.85
    )
    print(f"‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω: —Ä–∏—Å–∫ {legal.risk_level}")
    
    # –¢–µ—Å—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    economic = EconomicAnalysis(
        estimated_costs={"preparation": 50000, "documentation": 25000},
        potential_profit=500000,
        roi_estimate=0.25,
        market_opportunities=["–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å 1", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å 2"],
        economic_risks=["–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ 1"],
        risk_level=RiskLevel.LOW,
        recommendation="–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏—Å—Ç–∞",
        confidence=0.80
    )
    print(f"‚úÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω: —Ä–∏—Å–∫ {economic.risk_level}")
    
    # –¢–µ—Å—Ç —Ä–µ—à–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    decision = ManagerialDecision(
        decision=Decision.PARTICIPATE,
        reasoning="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
        key_factors=["–§–∞–∫—Ç–æ—Ä 1", "–§–∞–∫—Ç–æ—Ä 2"],
        conditions=["–£—Å–ª–æ–≤–∏–µ 1"],
        next_steps=["–®–∞–≥ 1", "–®–∞–≥ 2"],
        confidence=0.82
    )
    print(f"‚úÖ –†–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–æ: {decision.decision}")
    
    return contest, legal, economic, decision


def test_json_serialization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ JSON"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    contest, legal, economic, decision = test_models()
    
    # –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    try:
        contest_json = contest.model_dump_json(indent=2)
        legal_json = legal.model_dump_json(indent=2)
        economic_json = economic.model_dump_json(indent=2)
        decision_json = decision.model_dump_json(indent=2)
        
        print("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ JSON")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä JSON
        print("\nüìã –ü—Ä–∏–º–µ—Ä JSON –∫–æ–Ω–∫—É—Ä—Å–∞:")
        print(contest_json[:300] + "..." if len(contest_json) > 300 else contest_json)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


def test_graph_structure():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–∞ (–±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (—á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å API –∫–ª—é—á)
        from concurse.contest_analysis_graph import ContestAnalysisGraph
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞ —É—Å–ø–µ—à–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        required_methods = ['_build_graph', '_legal_analysis_node', '_economic_analysis_node', '_managerial_decision_node']
        for method in required_methods:
            if hasattr(ContestAnalysisGraph, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≥—Ä–∞—Ñ–∞: {e}")


def test_agents_structure():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤)"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        from concurse.agents import LegalAgent, EconomicAgent, ManagerAgent, BaseAgent
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        agents = [LegalAgent, EconomicAgent, ManagerAgent]
        for agent_class in agents:
            if issubclass(agent_class, BaseAgent):
                print(f"‚úÖ {agent_class.__name__} –Ω–∞—Å–ª–µ–¥—É–µ—Ç BaseAgent")
            else:
                print(f"‚ùå {agent_class.__name__} –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç BaseAgent")
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        required_methods = {
            'LegalAgent': ['analyze'],
            'EconomicAgent': ['analyze'], 
            'ManagerAgent': ['decide']
        }
        
        for agent_name, methods in required_methods.items():
            agent_class = globals()[agent_name] if agent_name in globals() else getattr(__import__('agents'), agent_name)
            for method in methods:
                if hasattr(agent_class, method):
                    print(f"‚úÖ {agent_name}.{method} –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"‚ùå {agent_name}.{method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")


def show_sample_analysis():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüìä –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print("=" * 50)
    
    contest, legal, economic, decision = test_models()
    
    # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
    sample_result = {
        "contest_info": contest.model_dump(),
        "legal_analysis": legal.model_dump(),
        "economic_analysis": economic.model_dump(),
        "managerial_decision": decision.model_dump(),
        "messages": ["–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"],
        "current_step": "completed"
    }
    
    print("üèõÔ∏è –Æ–†–ò–î–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {legal.risk_level}")
    print(f"   –†–∏—Å–∫–∏: {', '.join(legal.legal_risks[:2])}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {legal.confidence:.0%}")
    
    print("\nüí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {economic.risk_level}")
    print(f"   –ó–∞—Ç—Ä–∞—Ç—ã: {sum(economic.estimated_costs.values()):,} —Ä—É–±.")
    print(f"   –ü—Ä–∏–±—ã–ª—å: {economic.potential_profit:,} —Ä—É–±.")
    print(f"   ROI: {economic.roi_estimate:.1%}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {economic.confidence:.0%}")
    
    print("\nüëî –†–ï–®–ï–ù–ò–ï –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø:")
    print(f"   –†–µ—à–µ–Ω–∏–µ: {decision.decision.upper()}")
    print(f"   –§–∞–∫—Ç–æ—Ä—ã: {', '.join(decision.key_factors)}")
    print(f"   –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: {len(decision.next_steps)} —à–∞–≥–æ–≤")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision.confidence:.0%}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–ó–ê –ö–û–ù–ö–£–†–°–û–í")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API")
    print()
    
    try:
        test_models()
        test_json_serialization()
        test_graph_structure()
        test_agents_structure()
        show_sample_analysis()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å API –∫–ª—é—á–∞–º–∏")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("1. –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ —Ñ–∞–π–ª .env")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 